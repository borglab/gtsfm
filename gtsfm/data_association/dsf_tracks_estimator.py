"""Estimates tracks from feature correspondences using the Union-Find algorithm, with image ID and keypoint index for
that image as the unique keys.

References:
1. P. Moulon, P. Monasse. Unordered Feature Tracking Made Fast and Easy, 2012, HAL Archives.
   https://hal-enpc.archives-ouvertes.fr/hal-00769267/file/moulon_monasse_featureTracking_CVMP12.pdf

Authors: Ayush Baid, Sushmita Warrier, John Lambert, Travis Driver
"""

from typing import Dict, List, Tuple

import gtsam
import numpy as np

import gtsfm.utils.logger as logger_utils
from gtsfm.common.keypoints import Keypoints
from gtsfm.common.sfm_track import SfmMeasurement, SfmTrack2d
from gtsfm.data_association.tracks_estimator_base import TracksEstimatorBase

logger = logger_utils.get_logger()


class DsfTracksEstimator(TracksEstimatorBase):
    """Estimates tracks using a disjoint-set forest (DSF)."""

    def run(self, matches_dict: Dict[Tuple[int, int], np.ndarray], keypoints_list: List[Keypoints]) -> List[SfmTrack2d]:
        """Estimate tracks from feature correspondences.

        Creates a disjoint-set forest (DSF) and 2d tracks from pairwise matches. We create a singleton for union-find
        set elements from camera index of a detection and the index of that detection in that camera's keypoint list,
        i.e. (i,k).

        Args:
            matches_dict: Dict of pairwise matches of type:
                    key: indices for the matched pair of images
                    val: feature indices, as array of Nx2 shape; N being number of features. A row is (feature_idx1,
                         feature_idx2).
            keypoints_list: List of keypoints for each image.

        Returns:
            list of all valid SfmTrack2d generated by the matches.
        """
        # check to ensure dimensions of coordinates are correct
        dims_valid = all([kps.coordinates.ndim == 2 for kps in keypoints_list])
        if not dims_valid:
            raise Exception("Dimensions for Keypoint coordinates incorrect. Array needs to be 2D")

        # converting python dict into gtsam.MatchIndicesMap
        matches_map = gtsam.MatchIndicesMap()
        for (i1, i2), k_pairs in matches_dict.items():
            matches_map[gtsam.IndexPair(i1, i2)] = k_pairs
        
        # converting gtsfm Keypoints into gtsam Keypoints
        keypoints_vector = gtsam.KeypointsVector()
        for keypoint in keypoints_list:
            keypoints_vector.append(
                gtsam.gtsfm.Keypoints(keypoint.coordinates)
            )
        
        tracks = gtsam.gtsfm.tracksFromPairwiseMatches(
            matches_map,
            keypoints_vector,
            verbose=False,
        )

        # converting gtsam SfmTrack2d into gtsfm SfmTrack2d
        track_2d_list = [
            SfmTrack2d(
                [SfmMeasurement(i, uv) for (i, uv) in zip(track.indexVector(), track.measurementMatrix())]
            ) for track in tracks]

        return track_2d_list
